{"version":3,"sources":["queries/queries.js","components/AddAnimal.js","settings/types.js","components/AnimalDetails.js","components/AnimalList.js","App.js","serviceWorker.js","index.js"],"names":["getAnimalQuery","gql","getAnimalsQuery","getArcsQuery","addAnimalMutation","AddAnimal","props","onChange","e","setState","target","name","value","handleOptionChange","changeEvent","dietTypeOption","state","arcID","numberOfAnimals","errors","data","this","loading","disabled","arcs","map","arc","key","id","arcName","className","htmlFor","type","checked","classnames","preventDefault","test","variables","dietType","parseInt","refetchQueries","query","onSubmit","bind","placeholder","displayEatingHabits","defaultValue","displayArcs","Component","compose","graphql","AnimalDetails","animal","captainName","animals","item","displayAnimalDetails","options","animalID","AnimalList","selected","onClick","displayAnimals","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.30111258.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nconst getAnimalQuery = gql`\n  query($id: ID) {\n    animal(id: $id) {\n      id\n      name\n      dietType\n      numberOfAnimals\n      arc {\n        arcName\n        captainName\n        arcType\n        id\n        animals {\n          name\n          id\n        }\n      }\n    }\n  }\n`;\nconst getAnimalsQuery = gql`\n  {\n    animals {\n      id\n      name\n      dietType\n      numberOfAnimals\n    }\n  }\n`;\nconst getArcQuery = gql`\n  query($id: ID) {\n    arc(id: $id) {\n      arcName\n      captainName\n      arcType\n      animals {\n        name\n        dietType\n        numberOfAnimals\n      }\n    }\n  }\n`;\nconst getArcsQuery = gql`\n  {\n    arcs {\n      id\n      arcName\n      captainName\n      arcType\n    }\n  }\n`;\n\nconst addAnimalMutation = gql`\n  mutation(\n    $name: String!\n    $dietType: String!\n    $numberOfAnimals: Int!\n    $arcID: ID!\n  ) {\n    addAnimal(\n      name: $name\n      dietType: $dietType\n      numberOfAnimals: $numberOfAnimals\n      arcID: $arcID\n    ) {\n      id\n      name\n      dietType\n      numberOfAnimals\n      arcID\n    }\n  }\n`;\n\nexport {\n  getAnimalQuery,\n  getAnimalsQuery,\n  getArcsQuery,\n  getArcQuery,\n  addAnimalMutation,\n};\n","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { flowRight as compose } from 'lodash';\nimport classnames from 'classnames';\nimport {\n  DIET_TYPE_OPTION_BOTH,\n  DIET_TYPE_OPTION_CARNIVORE,\n  DIET_TYPE_OPTION_HERBIVORE,\n} from '../settings/types';\nimport {\n  getArcsQuery,\n  addAnimalMutation,\n  getAnimalsQuery,\n} from '../queries/queries';\n\nclass AddAnimal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      dietTypeOption: '',\n      arcID: '',\n      numberOfAnimals: '',\n      errors: {},\n    };\n  }\n  displayArcs() {\n    var data = this.props.getArcsQuery;\n    if (data.loading) {\n      return <option disabled>Loading...</option>;\n    } else {\n      return data.arcs.map((arc) => {\n        return (\n          <option key={arc.id} value={arc.id}>\n            {arc.arcName}\n          </option>\n        );\n      });\n    }\n  }\n  displayEatingHabits() {\n    const { dietTypeOption } = this.state;\n\n    return (\n      <div>\n        <div className='form-group'>\n          {this.state.errors.dietTypeOption ? (\n            <div className='invalid-feedback d-block'>\n              <label htmlFor='dietType'>Diet Type is required.</label>\n            </div>\n          ) : (\n            <div>\n              <label htmlFor='dietType'>Diet Type</label>\n            </div>\n          )}\n          <div className='form-check'>\n            <label>\n              <input\n                type='radio'\n                name='dietTypeOption'\n                value={DIET_TYPE_OPTION_CARNIVORE}\n                checked={dietTypeOption === DIET_TYPE_OPTION_CARNIVORE}\n                onChange={this.handleOptionChange}\n                className={classnames('form-check-input', {\n                  'is-invalid': this.state.errors.dietTypeOption,\n                })}\n              />\n              Carnivore\n            </label>\n          </div>\n          <div className='form-check'>\n            <label>\n              <input\n                type='radio'\n                name='dietTypeOption'\n                value={DIET_TYPE_OPTION_HERBIVORE}\n                className={classnames('form-check-input', {\n                  'is-invalid': this.state.errors.dietTypeOption,\n                })}\n                checked={dietTypeOption === DIET_TYPE_OPTION_HERBIVORE}\n                onChange={this.handleOptionChange}\n              />\n              Herbivore\n            </label>\n          </div>\n          <div className='form-check'>\n            <label>\n              <input\n                type='radio'\n                name='dietTypeOption'\n                value={DIET_TYPE_OPTION_BOTH}\n                className={classnames('form-check-input', {\n                  'is-invalid': this.state.errors.dietTypeOption,\n                })}\n                checked={dietTypeOption === DIET_TYPE_OPTION_BOTH}\n                onChange={this.handleOptionChange}\n              />\n              Both Carnivore and Herbivore\n            </label>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  onChange = (e) =>\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n\n  handleOptionChange = (changeEvent) => {\n    this.setState({\n      dietTypeOption: changeEvent.target.value,\n    });\n  };\n  onSubmit(e) {\n    e.preventDefault();\n\n    const re = /^[0-9\\b]+$/;\n    const { name, arcID, numberOfAnimals, dietTypeOption } = this.state;\n\n    // Check for errors\n    if (name === '') {\n      this.setState({ errors: { name: 'Name is required' } });\n      return;\n    }\n    if (numberOfAnimals === '') {\n      this.setState({\n        errors: { numberOfAnimals: 'Number of Animals is required' },\n      });\n      return;\n    }\n    if (!re.test(numberOfAnimals)) {\n      this.setState({ errors: { numberOfAnimals: 'Not a valid number.' } });\n      return;\n    }\n    if (dietTypeOption === '') {\n      this.setState({ errors: { dietTypeOption: 'Diet Type is required' } });\n      return;\n    }\n    if (arcID === '') {\n      this.setState({ errors: { arcID: 'Arc is required' } });\n\n      return;\n    }\n\n    this.props.addAnimalMutation({\n      variables: {\n        name: name,\n        dietType: dietTypeOption,\n        numberOfAnimals: parseInt(numberOfAnimals),\n        arcID: arcID,\n      },\n      refetchQueries: [\n        {\n          query: getAnimalsQuery,\n        },\n      ],\n    });\n\n    this.setState({\n      name: '',\n      dietTypeOption: '',\n      numberOfAnimals: '',\n      arcID: '',\n      errors: {},\n    });\n  }\n\n  render() {\n    const { name, arcID, numberOfAnimals, errors } = this.state;\n\n    return (\n      <div className='card col-md-6'>\n        <div className='card-header bg-success text-white'>Add Animal</div>\n        <div className='card-body '>\n          <form onSubmit={this.onSubmit.bind(this)}>\n            <div className='form-group'>\n              <label htmlFor='animalName'>Animal Name</label>\n              <input\n                type='text'\n                name='name'\n                className={classnames('form-control form-control-lg', {\n                  'is-invalid': errors.name,\n                })}\n                placeholder='Please Enter Animal Name'\n                value={name}\n                onChange={this.onChange}\n              />\n              {errors.name && (\n                <div className='invalid-feedback'>Animal Name is required.</div>\n              )}\n\n              <div className='form-group'>\n                <label htmlFor='numberOfAnimals'>Number of Animals</label>\n                <input\n                  type='text'\n                  name='numberOfAnimals'\n                  className={classnames('form-control form-control-lg', {\n                    'is-invalid': errors.numberOfAnimals,\n                  })}\n                  placeholder='Please Enter Number of Animals'\n                  value={numberOfAnimals}\n                  onChange={this.onChange}\n                />\n                {errors.numberOfAnimals && (\n                  <div className='invalid-feedback'>Not a valid number</div>\n                )}\n              </div>\n\n              {this.displayEatingHabits()}\n\n              <div className='form-group'>\n                <label htmlFor='author'>Arc</label>\n\n                <select\n                  className={classnames('form-control form-control-lg', {\n                    'is-invalid': errors.arcID,\n                  })}\n                  defaultValue={arcID}\n                  onChange={(e) => {\n                    this.setState({ arcID: e.target.value });\n                  }}\n                >\n                  <option>Select arc</option>\n                  {this.displayArcs()}\n                </select>\n\n                {errors.arcID && (\n                  <div className='invalid-feedback'>Arc is required.</div>\n                )}\n              </div>\n              <div className='form-group'>\n                <input\n                  type='submit'\n                  value='Add Animal'\n                  className='btn btn-light btn-block'\n                />\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  graphql(getArcsQuery, { name: 'getArcsQuery' }),\n  graphql(addAnimalMutation, { name: 'addAnimalMutation' })\n)(AddAnimal);\n","export const DIET_TYPE_OPTION_BOTH = 'Both';\nexport const DIET_TYPE_OPTION_CARNIVORE = 'Carnivore';\nexport const DIET_TYPE_OPTION_HERBIVORE = 'Herbivore';\n","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getAnimalQuery } from '../queries/queries';\n\nclass AnimalDetails extends Component {\n  displayAnimalDetails() {\n    const { animal } = this.props.data;\n    if (animal) {\n      return (\n        <div className='card border-success mb-3'>\n          <div className='card-header text-success'>\n            <h4>{animal.name}</h4>\n          </div>\n          <div className='card-body text-success'>\n            <p className='card-text'>\n              <b>Diet type: </b>\n              {animal.dietType}\n            </p>\n            <p className='card-text'>\n              <b>Number of animals: </b>\n              {animal.numberOfAnimals}\n            </p>\n\n            <p className='card-text'>\n              <b>Arc: </b>\n              {animal.arc.arcName}\n            </p>\n            <p className='card-text'>\n              <b>Captain: </b>\n              {animal.arc.captainName}\n            </p>\n            <p className='card-text'>Other animals on this arc:</p>\n            <ul className='other-animals'>\n              {animal.arc.animals.map((item) => {\n                return <li key={item.id}>{item.name}</li>;\n              })}\n            </ul>\n          </div>\n        </div>\n      );\n    } else {\n      return <div>No Animal Selected</div>;\n    }\n  }\n  render() {\n    return <div id='animal-details'>{this.displayAnimalDetails()}</div>;\n  }\n}\n\nexport default graphql(getAnimalQuery, {\n  options: (props) => {\n    return {\n      variables: {\n        id: props.animalID,\n      },\n    };\n  },\n})(AnimalDetails);\n","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getAnimalsQuery } from '../queries/queries';\nimport AnimalDetails from './AnimalDetails';\n\nclass AnimalList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selected: null,\n    };\n  }\n  displayAnimals() {\n    var data = this.props.data;\n    if (data.loading) {\n      return <div>Loading animals...</div>;\n    } else {\n      return data.animals.map((animal) => {\n        return (\n          <li\n            key={animal.id}\n            onClick={(e) => {\n              this.setState({ selected: animal.id });\n            }}\n          >\n            {animal.name}\n          </li>\n        );\n      });\n    }\n  }\n  render() {\n    return (\n      <div>\n        <ul id='animal-list'>{this.displayAnimals()}</ul>\n        <AnimalDetails animalID={this.state.selected} />\n      </div>\n    );\n  }\n}\n\nexport default graphql(getAnimalsQuery)(AnimalList);\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n//components\nimport AddAnimal from './components/AddAnimal';\nimport AnimalList from './components/AnimalList';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div id='main'>\n          <h2>List of Animals in Arcs</h2>\n\n          <AnimalList />\n\n          <AddAnimal />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}